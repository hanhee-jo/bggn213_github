---
title: "Class9"
author: "Hanhee Jo (PID: A59017994)"
format: pdf
toc: true
---

## Background

Today we are delving into an analysis of Halloween Candy data using ggplot, dplyr, basic stats, correlation analysis and our old friend PCA.


## 1. Import the data

```{r import}
candy <- read.csv("candy-data.csv", row.names=1)
head(candy)
```

> Q1. How many candy types are in this dataset?

```{r}
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```

> Q. How many chocolat candy types are in the dataset?

```{r}
sum(candy$chocolate)
```

## 2. What is your favorite candy?

> Q3. What is your favorite candy in the dataset and what is itâ€™s winpercent value?

```{r}
candy["Twix", "winpercent"]
```

```{r}
candy["Twix",]$winpercent
```

```{r}
#| message:  false
library(dplyr)
```

We can also use the `filter()` and `select()` functions from **dplyr**

```{r}
candy |>
  filter(rownames(candy) == "Twix") |>
  select(winpercent, sugarpercent)
```

```{r}
candy |>
  filter(rownames(candy) == "Haribo Gold Bears") |>
  select(winpercent, sugarpercent)
```


A useful function for a quqick look at a new dataset is found in the **skimr** package.

```{r}
skimr::skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

`winpercent` column is on a different "scale" or range than all the others.

**N.B** We will need to scale this data before analysis like PCA for example to avoid this one variable dominating our analysis.

> Q7. What do you think a zero and one represent for the candy$chocolate column?

That the candy has the chocolate.


> Q8. Plot a histogram of winpercent values usind base R and ggplot.

```{r}
hist(candy$winpercent)
```


```{r}
library(ggplot2)

ggplot(candy, aes(winpercent)) +
  geom_histogram(bins=10, fill = "lightblue")
```

> Q9. Is the distribution of winpercent values symmetrical?

No

> Q10. Is the center of the distribution above or below 50%?

From the histogram, it looks to be below 50% mark.

```{r}
summary(candy$winpercent)

#The median is below 50% but the mean is above 50%. 
```


> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

Step 1. Find/extract chocolate candy rows in the dataset.
Step 2. Get their `winpercent` values.
Step 3. Calculate their mean `winpercent` values.

Step 4. Find/extract fruity candy rows in the dataset.
Step 5. Get their `winpercent` values.
Step 6. Calculate their mean `winpercent` values.

Step 7. Compare mean chocolate `winpercent` to mean fruity `winpercent` and see which one is larger.

1. Find chocolate candy

```{r}
choc.inds <- candy$chocolate == 1
choc.candy <- candy[choc.inds, ]
```

2. Get their `winpercent` values.
```{r}
choc.win <- choc.candy$winpercent
```

3. Get their mean

```{r}
mean(choc.win)
```


4. Find fruity candy

```{r}
fruit.inds <- as.logical(candy$fruity)
fruit.candy <- candy[fruit.inds, ]
```

5. Get their `winpercent` values.
```{r}
fruit.win <- fruit.candy$winpercent
```

6. Get their mean

```{r}
mean(fruit.win)
```

You can also use **dplyr** package.

```{r}
candy |>
  filter(chocolate == 1) |>
  select(winpercent)
```


> Q12. Is this difference statistically significant?

Let's use a t.test

```{r}
t.test(choc.win, fruit.win)
```


## 3. Overall Candy Rankings

> Q13. What are the five least liked candy types in this set?

```{r}
#sort(candy$winpercent)

x <- c(10, 1, 100)
sort(x)
```

```{r}
order(x)
```

So I can use the output of `order(winpercent)` to re-arrange (or order) my whole dataset by `winpercent` 

```{r}
order.inds <-order(candy$winpercent)
head( candy[order.inds, ], 5 )
```

```{r}
candy |>
  arrange(winpercent) |>
  head(5)
```


> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
candy |>
  arrange(-winpercent) |>
  head(5)
```

> Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
ggplot(candy) +
  aes(winpercent, rownames(candy)) +
  geom_col()
```

We can make this plot better by rearranging (ordering) the y-axis by winpercent so the highest scoring candy is at the top and lowest at the bottom.

```{r}
p <- ggplot(candy) +
  aes(x=winpercent, 
      y=reorder(rownames(candy), winpercent) ) +
  geom_col() +
  ylab("") +
  xlab("Winning Percent")
```

```{r}
ggsave("my_plot.png", height=12, width=6)
```

This will insert the image in the rendered document.
![](my_plot.png)

> Q. Color your bars by "chocolate"

```{r}
ggplot(candy) +
  aes(x=winpercent, 
      y=reorder(rownames(candy), winpercent), fill=chocolate) +
  geom_col() +
  ylab("") +
  xlab("Winning Percent")
```

I want to color chocolate and fruity candy a specified color.
To do this, we need to define our own custom color vector that has the exact colot mappings we want.

```{r}
mycols <- rep("black", nrow(candy))

mycols[candy$chocolate == 1] <- "chocolate"
mycols[candy$bar == 1] <- "brown"
mycols[candy$fruity == 1] <- "pink"

mycols
```


```{r}
p <- ggplot(candy) +
  aes(x=winpercent, 
      y=reorder(rownames(candy), winpercent)) +
  geom_col(fill=mycols) +
  ylab("") +
  xlab("Winning Percent")
```

```{r}
ggsave("my_color_plot.png", heigh=12, width=6)
```

![](my_color_plot.png)


> Q17. What is the worst ranked chocolate candy?

sixlets

> Q18. What is the best ranked fruity candy?

starburst


## 4. Taking a look at pricepercent

Plot of winpercent vs pricepercent

```{r}
ggplot(candy) +
  aes(x=winpercent, 
      y=pricepercent, 
      label=rownames(candy)) +
  geom_point(col=mycols) +
  geom_text(col=mycols)
  theme_bw()
```

To avoid the common problem of label or text over-plotting we can use the **ggrepel** package like so:

```{r}
library(ggrepel)

ggplot(candy) +
  aes(x=winpercent, 
      y=pricepercent, 
      label=rownames(candy)) +
  geom_point(col=mycols) +
  geom_text_repel(col=mycols) +
  theme_bw()
```

We can control the amount of labels visible by setting different `max.overlaps` values:

```{r}
# Change pink to be red for fruity candy
mycols[candy$fruity == 1] <- "red"

ggplot(candy) +
  aes(x=winpercent, 
      y=pricepercent, 
      label=rownames(candy)) +
  geom_point(col=mycols) +
  geom_text_repel(col=mycols, max.overlaps = 8) +
  theme_bw()
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's Miniatures

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?


## 5. Exploring the correlation structure

The main function for correlation analysis in base R is called `cor()`

```{r}
cij <- cor(candy)
head(cij)
```

```{r}
library(corrplot)
```

```{r}
corrplot(cij)
```


## 6. Principal Component Analysis (PCA)

We can use our old friend `prcomp()` finction with `scale=TRUE`.

```{r}
pca <- prcomp(candy, scal=TRUE)
```

Let's make our main results figures, first our scroe plot (PC plot)

```{r}
attributes(pca)
```

```{r}
ggplot(pca$x) +
  aes(PC1, PC2, label=rownames(candy)) +
  geom_point(col=mycols) +
  geom_text_repel(col=mycols, max.overlaps = 8)
```

Let's look at how the original variables contribute to our new PC's - this is often called the variable "loadings" 

```{r}
ggplot(pca$rotation) +
  aes(x=PC1, 
      y=reorder(rownames(pca$rotation), PC1)) +
  geom_col()
```



