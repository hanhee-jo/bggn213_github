---
title: "Class5: Data Viz with ggplot"
author: "Hanhee"
format: pdf
toc: true
---

# Graphs and plots in R

R has tones of different graphics systems. These include **"base R"** (e.g. the `plot()` function) and add on packages like **ggplot2**

Let's start with plotting a simple dataset in "base R" and then ggplot2 to see how they differ.

```{r}
head(cars)
```

To plot this in base R, I just use `plot()`

```{r}
plot(cars)
```

First to use ggplot2 I need install the package. For this I use the `install.packages()` function.

> I don't want to run `install.packages()` in my quarto documents as this would re-install the package every time I render the document. So install it at the Console section.

The main function in the ggplot2 package is `ggplot()`.
Before i can use this function I need to load the package with a `library()` call.

```{r}
library(ggplot2)
ggplot(cars)
```

There are at least 3 things that every ggplot needs:

- the **data** (the data I want to plot)
- the **aes**thetics 9how the data maps to my plot)
- the **geoms** or geometries (the type of plot)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```

```{r}
p1 <- ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method = "lm")
```

```{r}
p1
```
```{r}
p1 + labs(title="My nice GGPLOT", 
         x="Speed (MPH)",
         y="Stopping Disctance") + 
  theme_bw()
```

## A RNASeq plot with more aes() values

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```


> Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer? 

```{r}
nrow(genes)
```


> Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find? 

```{r}
ncol(genes)
```


> Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer? 

```{r}
sum(genes$State =="up")
```

```{r}
table(genes$State)
```


> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset? 

```{r}
table(genes$State) / nrow(genes) * 100
```


> Q. Complete the code below to produce the following plot

```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2) +
    geom_point()
```

```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point() +
    scale_color_manual(values = c("blue", "grey", "red"))
```

```{r}
p2 <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point() +
    scale_color_manual(values = c("blue", "grey", "red"))
```

```{r}
p2 + labs(title="Gene expression change upon drug treatment",
         subtitle = "RNAseq data",
         x= "Control (no treatment)",
         y= "Drug treatment")
```

## Gapminder dataset plots

We can get exposure to setting more `aes()` parameters with datasets that include more columns of useful data. For example the **gapminder** dataset on GPD and life expendency for different countries over time.

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

> How many entries (i.e. rows)

```{r}
nrow(gapminder)
```

> Have a wee peak ar the first 6 rows

```{r}
head(gapminder)
```

> How many unique countries are there in the dataset?

```{r}
length(unique(gapminder$country))
```

> What years does the dataset cover?

```{r}
table(gapminder$year)
```

Key function that will be useful in our R ourney include:

- nrow()
- ncol()
- length()
- unique()
- table()

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.3)
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, col=continent) +
  geom_point(alpha=0.3)+
  facet_wrap(~continent)
```


## Combining plots

```{r}
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```

